<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/03/10/Apk%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <url>/2021/03/10/Apk%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1><span id="apk文件结构">Apk文件结构</span></h1><ul><li>以压缩文件存形式储的。</li><li>asset 存储静态资源 不经过aapt编译</li><li>meta-inf 签名文件</li><li>resource-arsc  资源索引表 </li></ul><h2><span id="apk打包流程">apk打包流程</span></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>8种保证线程安全的方法</title>
    <link href="/2021/01/11/8%E7%A7%8D%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2021/01/11/8%E7%A7%8D%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>并发情况下如何保证数据安全，一直都是开发人员每天都要面对的问题，稍不注意就会出现数据异常，造成不可挽回的结果。笔者根据自己的实际开发经验，总结了下面几种保证数据安全的技术手段：</p><ul><li>无状态</li><li>不可变</li><li>安全的发布</li><li>volatile</li><li>synchronized</li><li>lock</li><li>cas</li><li>threadlocal<h2><span id="无状态">无状态</span></h2>我们都知道只有多个线程访问公共资源的时候，才可能出现数据安全问题，那么如果我们没有公共资源，是不是就没有这个问题呢？<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoStatusService</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String status)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;add status:&quot;</span> + status);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(String status)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;update status:&quot;</span> + status);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="不可变">不可变</span></h2>如果多个线程访问公共资源是不可变的，也不会出现数据的安全性问题。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoChangeService</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_NAME = <span class="hljs-string">&quot;abc&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String status)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;add status:&quot;</span> + status);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="安全的发布">安全的发布</span></h2>如果类中有公共资源，但是没有对外开放访问权限，即对外安全发布，也没有线程安全问题<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SafePublishService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String status)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;add status:&quot;</span> + status);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="volatile">volatile</span></h2>如果有些公共资源只是一个开关，只要求可见性，不要求原子性，这样可以用volidate关键字定义来解决问题。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlagService</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            System.out.println(<span class="hljs-string">&quot;return&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;       <br>       flag = <span class="hljs-keyword">true</span>;<br>        System.out.println(<span class="hljs-string">&quot;change&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="synchronized">synchronized</span></h2>使用JDK内部提供的同步机制，这也是使用比较多的手段，分为：方法同步 和 代码块同步，我们优先使用代码块同步，因为方法同步的范围更大，更消耗性能。每个对象内部都又一把锁，只有抢答那把锁的线程，才能进入代码块里，代码块执行完之后，会自动释放锁。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        age = age + i;        <br>        System.out.println(<span class="hljs-string">&quot;age:&quot;</span> + age);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>            age = age + i;                          <br>            System.out.println(<span class="hljs-string">&quot;age:&quot;</span> + age);<br>        &#125;    <br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="lock">lock</span></h2>除了使用synchronized关键字实现同步功能之外，JDK还提供了lock显示锁的方式。它包含：可重入锁、读写锁 等更多更强大的功能，有个小问题就是需要手动释放锁，不过在编码时提供了更多的灵活性。<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LockService</span> &#123;<br>    <span class="hljs-keyword">private</span> ReentrantLock reentrantLock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i</span>)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            reentrantLock.<span class="hljs-keyword">lock</span>();<br>            age = age + i;           <br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;age:&quot;</span> + age);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            reentrantLock.unlock();        <br>        &#125;    <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="cas">cas</span></h2>JDK除了使用锁的机制解决多线程情况下数据安全问题之外，还提供了cas机制。这种机制是使用CPU中比较和交换指令的原子性，JDK里面是通过Unsafe类实现的。cas需要四个值：旧数据、期望数据、新数据 和 地址，比较旧数据 和 期望的数据如果一样的话，就把旧数据改成新数据，当前线程不断自旋，一直到成功为止。不过可能会出现aba问题，需要使用AtomicStampedReference增加版本号解决。其实，实际工作中很少直接使用Unsafe类的，一般用atomic包下面的类即可。<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomicService</span> &#123;</span><br>    <span class="hljs-keyword">private</span> AtomicInteger atomicInteger = <span class="hljs-keyword">new</span> AtomicInteger();<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> atomicInteger.getAndAdd(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="threadlocal">threadlocal</span></h2>除了上面几种解决思路之外，JDK还提供了另外一种用空间换时间的新思路：threadlocal。它的核心思想是：共享变量在每个线程都有一个副本，每个线程操作的都是自己的副本，对另外的线程没有影响。特别注意，使用threadlocal时，使用完之后，要记得调用remove方法，不然可能会出现内存泄露问题。<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> ThreadLocalService &#123;<br>    private ThreadLocal&lt;<span class="hljs-type">Integer</span>&gt; threadLocal = <span class="hljs-built_in">new</span> ThreadLocal&lt;&gt;();<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">add</span>(<span class="hljs-type">int</span> i) &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-type">integer</span> = threadLocal.<span class="hljs-keyword">get</span>();<br>        threadLocal.<span class="hljs-keyword">set</span>(<span class="hljs-type">integer</span> == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : <span class="hljs-type">integer</span> + i);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>总结<br>本文介绍了8种多线程情况下保证数据安全的技术手段，当然实际工作中可能会有其他。技术没有好坏之分，主要是看使用的场景，需要在不同的场景下使用不同的技术。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2021/01/09/Java%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/01/09/Java%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">基础概念</a><ul><li><a href="#%E5%AF%B9%E8%B1%A1">对象</a></li><li><a href="#%E7%B1%BB">类</a></li><li><a href="#%E6%96%B9%E6%B3%95">方法</a></li><li><a href="#%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F">实例变量</a></li></ul></li><li><a href="#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">基本语法</a><ul><li><a href="#java%E6%A0%87%E8%AF%86%E7%AC%A6">java标识符</a><ul><li><a href="#%E4%B8%8D%E7%94%A8%E6%95%B0%E5%AD%97%E5%BC%80%E5%A4%B4%E7%9A%84%E5%8E%9F%E5%9B%A0">不用数字开头的原因</a></li></ul></li><li><a href="#java%E4%BF%AE%E9%A5%B0%E7%AC%A6">java修饰符</a></li><li><a href="#java%E5%8F%98%E9%87%8F">java变量？？</a></li><li><a href="#java-%E6%95%B0%E7%BB%84">Java 数组</a></li><li><a href="#java-%E6%9E%9A%E4%B8%BE">Java 枚举</a></li><li><a href="#java-%E5%85%B3%E9%94%AE%E5%AD%97">java 关键字</a></li><li><a href="#java%E6%B3%A8%E9%87%8A">Java注释</a></li><li><a href="#%E5%B0%81%E8%A3%85">封装</a></li><li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li><li><a href="#%E5%A4%9A%E6%80%81">多态</a></li><li><a href="#%E6%8E%A5%E5%8F%A3">接口</a></li><li><a href="#java-%E6%BA%90%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%BC%96%E8%AF%91%E5%9E%8B%E8%BF%90%E8%A1%8C%E5%8C%BA%E5%88%AB">Java 源程序与编译型运行区别</a></li><li><a href="#%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80">编译型语言和解释型语言</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D">使用序列化实现对象的拷贝</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4">基本数据类型的取值范围</a></li><li><a href="#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B">引用类型</a></li><li><a href="#%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">访问控制修饰符</a></li><li><a href="#%E9%9D%9E%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">非访问控制修饰符</a></li><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB">内部类</a><ul><li><a href="#%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB">成员内部类</a></li><li><a href="#%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB">局部内部类</a></li><li><a href="#%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB">匿名内部类</a></li></ul></li><li><a href="#final%E4%BD%BF%E7%94%A8">final使用</a></li><li><a href="#%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB">静态内部类</a></li><li><a href="#instanceof%E4%B8%8Egetclass%E7%9A%84%E5%8C%BA%E5%88%AB">instanceof与getClass的区别</a></li><li><a href="#string-stringbuffer-stringbuilder">String StringBuffer StringBuilder</a></li></ul></li><li><a href="#%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB">异常体系</a><ul><li><a href="#java%E8%BF%90%E7%AE%97%E7%AC%A6">java运算符</a></li><li><a href="#java-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84">java 循环结构</a></li><li><a href="#%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5">判断语句</a></li><li><a href="#switch-case">switch case</a></li><li><a href="#java-numbermath">java Number&amp;Math</a></li><li><a href="#string-stringbuffer-stringbuilder-1">String StringBuffer StringBuilder</a></li></ul></li><li><a href="#%E9%9B%86%E5%90%88">集合</a><ul><li><a href="#arraylist">ArrayList</a></li><li><a href="#%E4%BA%8C-arraylist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">二、ArrayList源码分析</a></li><li><a href="#string%E7%9A%84hashcode%E9%87%8D%E5%A4%8D%E9%97%AE%E9%A2%98">String的hashcode重复问题</a></li><li><a href="#java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">Java 正则表达式</a></li><li><a href="#java-streamfileio">Java Stream，File，Io</a></li></ul></li></ul><!-- tocstop --><h1><span id="基础概念">基础概念</span></h1><h2><span id="对象">对象</span></h2><p> 对象是类的一个实例，他有状态和行为</p><h2><span id="类">类</span></h2><p>  类是一个模板，他描述一类对象的行为和状态</p><h2><span id="方法">方法</span></h2><p>方法就是行为，一个类可以有很多方法</p><h2><span id="实例变量">实例变量</span></h2><p>每个对象都有独特的实例变量，对象的状态由这些实例状态的值决定</p><h1><span id="基本语法">基本语法</span></h1><ul><li>大小写敏感</li><li>类名：类的首字母大写，如果有多个单词组成，每个单词首字母都应该大写</li><li>方法名 ：起始字母小写，其他单词首字母大写</li><li>源文件名 ：应与类名相同</li><li>主方法入口：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//所有使用java语言的都是</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2><span id="java标识符">java标识符</span></h2>Java 所有的组成部分都需要名字。==类名、变量名以及方法名都被称为标识符==。</li><li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li><li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符是大小写敏感的<br>合法标识符举例：age、$salary、_value、__1_value<br>非法标识符举例：123abc、-salary</li></ul><p>总结起来 就是三个 字母美元下划线开头，后面可以跟数字</p><h3><span id="不用数字开头的原因">不用数字开头的原因</span></h3><p> 标示符（ID_entifier）是指用来标识某个实体的一个符号。在不同的应用环境下有不同的含义。比如，在日常生活中，某人的姓名；在数学解方程时，用到这样或那样的变量名或函数名；在编程语言中，标识符是为变量、常量、函数、等起的名字。所有这些，统统称为标识符。标识符可能是字母、符号，或由上述元素构成的组合。<br>多种语言表示数值的方法，第一个字符要求一定要是数字字符，尽管后面的字符可能不一定是数字字符。<br>下列JAVA代码声明不同类型数值的标识符(左边：变量类型 标识符)，并以相应的数值初始化(右边：变量数值)。<br>为了有效区别”数字值”与其”标识符”，必须对标识符有所约束。<br>比如下列 Java 代码的第一个声明，若取数字字符’0’为 这个 8 进制数值变量的标识符，即<br>int 0 = 0321；<br>那么，赋值操作符 ‘=’ 两边的符号均为数字字符，两者无法区分。</p><p>所以，Java 语言规定，标识符的第一个字符不允许是数字字符，但第一个字符可以是下划线’<em>‘。于是，下列Java代码的标识符的第一个字符只要取为下划线’</em>‘, 第二个字符是什么数字字符都无妨了。</p><p>再比如，下列 Java 代码的最后一个声明:<br>double e = 3e3;<br>如果标识符允许第一个字符为数字字符的话，那么 3e3 既可表示标识符(变量名)，亦可表示数值：3*10^3, 编译时会显示二义性。</p><p>为了避免上述弊端，多种编程语言对标识符的命名法，均做出严格规定：标识符不能以数字字符开头。</p><h2><span id="java修饰符">java修饰符</span></h2><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p><p>访问控制修饰符 : default, public , protected, private<br>非访问控制修饰符 : final, abstract, static, synchronized</p><h2><span id="java变量">java变量？？</span></h2><p> 局部变量<br> 静态变量又称类变量<br> 成员变量（非静态变量）</p><h2><span id="java-数组">Java 数组</span></h2><p> 数组是储存在堆上的对象，可以保存多个同类型变量</p><h2><span id="java-枚举">Java 枚举</span></h2><p> Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</p><h2><span id="java-关键字">java 关键字</span></h2><table class="reference"><tbody><tr><th>类别</th><th>关键字</th><th>说明</th></tr><tr><td rowspan="3" align="center">访问控制</td><td>private</td><td>私有的</td></tr><tr><td>protected</td><td>受保护的</td></tr><tr><td>public</td><td>公共的</td></tr><tr><td rowspan="13" align="center">类、方法和变量修饰符</td><td>abstract</td><td>声明抽象</td></tr><tr><td>class</td><td>类</td></tr><tr><td>extends</td><td>扩充,继承</td></tr><tr><td>final</td><td>最终值,不可改变的</td></tr><tr><td>implements</td><td>实现（接口）</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>native</td><td>本地，原生方法（非 Java 实现）</td></tr><tr><td>new</td><td>新,创建</td></tr><tr><td>static</td><td>静态</td></tr><tr><td>strictfp</td><td>严格,精准</td></tr><tr><td>synchronized</td><td>线程,同步</td></tr><tr><td>transient</td><td>短暂</td></tr><tr><td>volatile</td><td>易失</td></tr><tr><td rowspan="12" align="center">程序控制语句</td><td>break</td><td>跳出循环</td></tr><tr><td>case</td><td>定义一个值以供 switch 选择</td></tr><tr><td>continue</td><td>继续</td></tr><tr><td>default</td><td>默认</td></tr><tr><td>do</td><td>运行</td></tr><tr><td>else</td><td>否则</td></tr><tr><td>for</td><td>循环</td></tr><tr><td>if</td><td>如果</td></tr><tr><td>instanceof</td><td>实例</td></tr><tr><td>return</td><td>返回</td></tr><tr><td>switch</td><td>根据值选择执行</td></tr><tr><td>while</td><td>循环</td></tr><tr><td rowspan="6" align="center">错误处理</td><td>assert</td><td>断言表达式是否为真</td></tr><tr><td>catch</td><td>捕捉异常</td></tr><tr><td>finally</td><td>有没有异常都执行</td></tr><tr><td>throw</td><td>抛出一个异常对象</td></tr><tr><td>throws</td><td>声明一个异常可能被抛出</td></tr><tr><td>try</td><td>捕获异常</td></tr><tr><td rowspan="2" align="center">包相关</td><td>import</td><td>引入</td></tr><tr><td>package</td><td>包</td></tr><tr><td rowspan="8" align="center">基本类型</td><td>boolean</td><td>布尔型</td></tr><tr><td>byte</td><td>字节型</td></tr><tr><td>char</td><td>字符型</td></tr><tr><td>double</td><td>双精度浮点</td></tr><tr><td>float</td><td>单精度浮点</td></tr><tr><td>int</td><td>整型</td></tr><tr><td>long</td><td>长整型</td></tr><tr><td>short</td><td>短整型</td></tr><tr><td rowspan="3" align="center">变量引用</td><td>super</td><td>父类,超类</td></tr><tr><td>this</td><td>本类</td></tr><tr><td>void</td><td>无返回值</td></tr><tr><td rowspan="3" align="center">保留关键字</td><td>goto</td><td>是关键字，但不能使用</td></tr><tr><td>const</td><td>是关键字，但不能使用</td></tr><tr><td>null</td><td>空</td></tr></tbody></table><hr><h2><span id="java注释">Java注释</span></h2><p>三种</p><p>单行注释，多行注释，文档注释</p><h2><span id="封装">封装</span></h2><h2><span id="继承">继承</span></h2><p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p><p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。</p><p>继承是描述 is a的关系。</p><h2><span id="多态">多态</span></h2><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，<strong>必须在由程序运行期间才能决定</strong>。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性</p><h2><span id="接口">接口</span></h2><p>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p><p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p><h2><span id="java-源程序与编译型运行区别">Java 源程序与编译型运行区别</span></h2><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/ZSSDMld.png" alt="image"></p><h2><span id="编译型语言和解释型语言">编译型语言和解释型语言</span></h2><h2><span id="使用序列化实现对象的拷贝">使用序列化实现对象的拷贝</span></h2><ul><li><p>浅拷贝</p><p>  1、 基本类型</p><p>​     如果变量是基本很类型，则拷贝其值，比如int、float等。</p><p>   2、 对象</p><p>​     如果变量是一个实例对象，则<strong>拷贝其地址引用</strong>，也就是说此时新对象与原来对象是公用该实例变量。</p><p>   3、 String字符串</p><p>​     若变量为String字符串，则拷贝其地址引用。但是在修改时，它会从字符串池中重新生成一个新的字符串，原有对象保持不变</p></li><li><p>深拷贝</p><p>内存中通过字节流的拷贝是比较容易实现的。把母对象写入到一个字节流中，再从字节流中将其读出来，这样就可以创建一个新的对象了，并且该新对象与母对象之间并不存在引用共享的问题，真正实现对象的深拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CloneUtils</span> </span>&#123;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T extends Serializable&gt; <span class="hljs-function">T <span class="hljs-title">clone</span><span class="hljs-params">(T obj)</span></span>&#123;<br>        T cloneObj = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//写入字节流</span><br>            ByteArrayOutputStream out = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            ObjectOutputStream obs = <span class="hljs-keyword">new</span> ObjectOutputStream(out);<br>            obs.writeObject(obj);<br>            obs.close();<br>            <br>            <span class="hljs-comment">//分配内存，写入原始对象，生成新对象</span><br>            ByteArrayInputStream ios = <span class="hljs-keyword">new</span> ByteArrayInputStream(out.toByteArray());<br>            ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(ios);<br>            <span class="hljs-comment">//返回生成的新对象</span><br>            cloneObj = (T) ois.readObject();<br>            ois.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> cloneObj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用该工具类的对象必须要实现Serializable接口，否则是没有办法实现克隆的</p></li></ul><h2><span id="基本数据类型的取值范围">基本数据类型的取值范围</span></h2><p><a href="https://www.cnblogs.com/tuojunjie/p/6383624.html">先了解下补码</a><br>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><ul><li>byte：</li></ul><p>byte 数据类型是8位、有符号的，以二进制补码表示的整数；<br>最小值是 -128（-2^7）；<br>最大值是 127（2^7-1）；<br>默认值是 0；<br>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；<br>例子：byte a = 100，byte b = -50。</p><ul><li>short：</li></ul><p>short 数据类型是 16 位、有符号的以二进制补码表示的整数<br>最小值是 -32768（-2^15）；<br>最大值是 32767（2^15 - 1）；<br>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；<br>默认值是 0；<br>例子：short s = 1000，short r = -20000。</p><ul><li>int：</li></ul><p>int 数据类型是32位、有符号的以二进制补码表示的整数；<br>最小值是 -2,147,483,648（-2^31）；<br>最大值是 2,147,483,647（2^31 - 1）；<br>一般地整型变量默认为 int 类型；<br>默认值是 0 ；<br>例子：int a = 100000, int b = -200000。<br>long：</p><ul><li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；<br>最小值是 -9,223,372,036,854,775,808（-2^63）；<br>最大值是 9,223,372,036,854,775,807（2^63 -1）；<br>这种类型主要使用在需要比较大整数的系统上；<br>默认值是 0L；<br>例子： long a = 100000L，Long b = -200000L。<br>“L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。</li><li>float：</li></ul><p>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；<br>float 在储存大型浮点数组的时候可节省内存空间；<br>默认值是 0.0f；<br>浮点数不能用来表示精确的值，如货币；<br>例子：float f1 = 234.5f。</p><ul><li>double：</li></ul><p>double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；<br>浮点数的默认类型为double类型；<br>double类型同样不能表示精确的值，如货币；<br>默认值是 0.0d；<br>例子：double d1 = 123.4。</p><ul><li>boolean：</li></ul><p>boolean数据类型表示一位的信息；<br>只有两个取值：true 和 false；<br>这种类型只作为一种标志来记录 true/false 情况；<br>==默认值是 false==；<br>例子：boolean one = true。</p><ul><li>char：</li></ul><p>char类型是一个单一的 16 位 Unicode 字符；<br>最小值是 \u0000（即为0）；<br>最大值是 \uffff（即为65,535）；<br>char 数据类型可以储存任何字符；<br>例子：char letter = ‘A’;</p><h2><span id="引用类型">引用类型</span></h2><h2><span id="访问控制修饰符">访问控制修饰符</span></h2><table class="reference"><caption style="font-weight: bold;font-size:16px;font-weight: bold;" id="accesscontrol-levels">访问控制</caption><tbody><tr><th>修饰符</th><th>当前类</th><th>同一包内</th><th>子孙类(同一包)</th><th>子孙类(不同包)</th><th>其他包</th></tr><tr><td headers="h1"><code>public</code></td><td headers="h2">Y</td><td headers="h3">Y</td><td headers="h4">Y</td><td headers="h5">Y</td><td headers="h6">Y</td></tr><tr><td headers="h1"><code>protected</code></td><td headers="h2">Y</td><td headers="h3">Y</td><td headers="h4">Y</td><td headers="h5">Y/N（<a href="#protected-desc">说明</a>）</td><td headers="h6">N</td></tr><tr><td headers="h1"><code>default</code></td><td headers="h2">Y</td><td headers="h3">Y</td><td headers="h4">Y</td><td headers="h5">N</td><td headers="h6">N</td></tr><tr><td headers="h1"><code>private</code></td><td headers="h2">Y</td><td headers="h3">N</td><td headers="h4">N</td><td headers="h5">N</td><td headers="h6">N</td></tr></tbody></table>默认访问修饰符-不使用任何关键字使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 public static final,而接口里的方法默认情况下访问权限为 public。<ul><li>==受保护的访问修饰符-protected<br>protected== 需要从以下两个点来分析说明：</li></ul><p>子类与基类在同一包中：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；</p><p>子类与基类不在同一包中：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。</p><h2><span id="非访问控制修饰符">非访问控制修饰符</span></h2><p>为了实现一些其他的功能，Java 也提供了许多非访问修饰符。</p><p>static 修饰符，用来修饰类方法和类变量。 属于类不属于某一个实例变量，或者说被说有实例共享，所以this不能使用，只能访问静态变量静态方法</p><p>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p><p>abstract 修饰符，用来创建抽象类和抽象方法。</p><p>synchronized 和 volatile 修饰符，主要用于线程的编程。</p><p>static 修饰符<br>静态变量：</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p><p>静态方法：</p><p>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据</p><p>synchronized 修饰符<br>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符</p><p>transient 修饰符<br>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p><p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p><p>volatile 修饰符<br>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p><p>一个 volatile 对象引用可能是 null。</p><h2><span id="内部类">内部类</span></h2><h3><span id="成员内部类">成员内部类</span></h3><p>第一：成员内部类中不能存在任何static的变量和方法；</p><p>​         Static 不用实例化就能加载进内存</p><p>　　而内部类需要外部类实例化后才能加载进内存。这就间接造成static需要实例化了。与static不需要实例化语义矛盾</p><p>第二：成员内部类是依附于外围类的，所以只有先创建了外围类才能够创建内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String str;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outerDisplay</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;outerClass...&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">innerDisplay</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-comment">//使用外围内的属性</span><br>            str = <span class="hljs-string">&quot;chenssy...&quot;</span>;<br>            System.out.println(str);<br>            <span class="hljs-comment">//使用外围内的方法</span><br>            outerDisplay();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/*推荐使用getxxx()来获取成员内部类，尤其是该内部类的构造函数无参数时 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> InnerClass <span class="hljs-title">getInnerClass</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> InnerClass();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        OuterClass outer = <span class="hljs-keyword">new</span> OuterClass();<br>        OuterClass.InnerClass inner = outer.getInnerClass();<br>        inner.innerDisplay();<br>    &#125;<br>&#125;<br>--------------------<br>chenssy...<br>outerClass...<br></code></pre></td></tr></table></figure><h3><span id="局部内部类">局部内部类</span></h3><p>有这样一种内部类，它是嵌套在方法和作用于内的，对于这个类的使用主要是应用与解决比较复杂的问题，想创建一个类来辅助我们的解决方案，到那时又不希望这个类是公共可用的，所以就产生了局部内部类，局部内部类和成员内部类一样被编译，只是它的作用域发生了改变，它只能在该方法和属性中被使用，出了该方法和属性就会失效。</p><p>定义在方法里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parcel5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Destionation <span class="hljs-title">destionation</span><span class="hljs-params">(String str)</span></span>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PDestionation</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Destionation</span></span>&#123;<br>            <span class="hljs-keyword">private</span> String label;<br>            <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">PDestionation</span><span class="hljs-params">(String whereTo)</span></span>&#123;<br>                label = whereTo;<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">readLabel</span><span class="hljs-params">()</span></span>&#123;<br>                <span class="hljs-keyword">return</span> label;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PDestionation(str);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Parcel5 parcel5 = <span class="hljs-keyword">new</span> Parcel5();<br>        Destionation d = parcel5.destionation(<span class="hljs-string">&quot;chenssy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 定义在作用域内:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parcel6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">internalTracking</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(b)&#123;<br>            <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TrackingSlip</span></span>&#123;<br>                <span class="hljs-keyword">private</span> String id;<br>                TrackingSlip(String s) &#123;<br>                    id = s;<br>                &#125;<br>                <span class="hljs-function">String <span class="hljs-title">getSlip</span><span class="hljs-params">()</span></span>&#123;<br>                    <span class="hljs-keyword">return</span> id;<br>                &#125;<br>            &#125;<br>            TrackingSlip ts = <span class="hljs-keyword">new</span> TrackingSlip(<span class="hljs-string">&quot;chenssy&quot;</span>);<br>            String string = ts.getSlip();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">track</span><span class="hljs-params">()</span></span>&#123;<br>        internalTracking(<span class="hljs-keyword">true</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Parcel6 parcel6 = <span class="hljs-keyword">new</span> Parcel6();<br>        parcel6.track();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="匿名内部类">匿名内部类</span></h3><p>  1 匿名内部类是没有访问修饰符的。</p><p>  2 new 匿名内部类，这个类首先是要存在的。如果我们将那个InnerClass接口注释掉，就会出现编译出错。</p><p>  3 注意getInnerClass()方法的形参，第一个形参是用final修饰的，而第二个却没有。同时我们也发现第二个形参在匿名内部类中没有使用过，所以当所在方法的形参需要被匿名内部类使用，那么这个形参就必须为final。</p><p> 4 匿名内部类是没有构造方法的。因为它连名字都没有何来构造方法。</p><h2><span id="final使用">final使用</span></h2><p> 我们给匿名内部类传递参数的时候，若该形参在内部类中需要被使用，那么该形参必须要为final。也就是说：<strong>当所在的方法的形参需要被内部类里面使用时，该形参必须为final。</strong></p><p>   为什么必须要为final呢？</p><p>   首先我们知道在内部类编译成功后，它会产生一个class文件，该class文件与外部类并不是同一class文件，仅仅只保留对外部类的引用。当外部类传入的参数需要被内部类调用时，从java程序的角度来看是直接被调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String name,String age)</span></span>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span></span>&#123;<br>            <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>&#123;<br>                System.out.println(name);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 从上面代码中看好像name参数应该是被内部类直接调用？其实不然，在java编译之后实际的操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span>$<span class="hljs-title">InnerClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InnerClass</span><span class="hljs-params">(String name,String age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.InnerClass$name = name;<br>        <span class="hljs-keyword">this</span>.InnerClass$age = age;<br>    &#125;<br>    <br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.InnerClass$name + <span class="hljs-string">&quot;----&quot;</span> + <span class="hljs-keyword">this</span>.InnerClass$age );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 所以从上面代码来看，内部类并不是直接调用方法传递的参数，而是利用自身的构造器对传入的参数进行备份，自己内部方法调用的实际上时自己的属性而不是外部方法传递进来的参数。</p><p>​    直到这里还没有解释为什么是final？在内部类中的属性和外部方法的参数两者从外表上看是同一个东西，但实际上却不是，所以他们两者是可以任意变化的，也就是说在内部类中我对属性的改变并不会影响到外部的形参，而然这从程序员的角度来看这是不可行的，毕竟站在程序的角度来看这两个根本就是同一个，如果内部类该变了，而外部方法的形参却没有改变这是难以理解和不可接受的，所以为了保持参数的一致性，就规定使用final来避免形参的不改变。</p><p>   简单理解就是，拷贝引用，为了避免引用值发生改变，例如被外部类的方法修改等，而导致内部类得到的值不一致，于是用final来让该引用不可改变。</p><p>   <strong><em>故如果定义了一个匿名内部类，并且希望它使用一个其外部定义的参数，那么编译器会要求该参数引用是final的。</em></strong></p><h2><span id="静态内部类">静态内部类</span></h2><p>不能引用外部非static的变量或方法</p><p> 它的创建是不需要依赖于外围类的</p><h2><span id="instanceof与getclass的区别">instanceof与getClass的区别</span></h2><p>instanceof进行类型检查规则是:你属于该类吗？或者你属于该类的派生类吗？而通过getClass获得类型信息采用==来进行检查是否相等的操作是严格的判断。不会存在继承方面的考虑；</p><h2><span id="string-stringbuffer-stringbuilder">String StringBuffer StringBuilder</span></h2><ul><li>String</li></ul><p>String并不是基本数据类型，而是一个对象，并且是不可变的对象。查看源码就会发现String类为final型的（当然也不可被继承），而且通过查看JDK文档会发现几乎每一个修改String对象的操作，实际上都是创建了一个全新的String对象</p><p>字符串为对象，那么在初始化之前，它的值为null，到这里就有必要提下””、null、new String()三者的区别。null 表示string还没有new ，也就是说对象的引用还没有创建，也没有分配内存空间给他，而””、new String()则说明了已经new了，只不过内部为空，但是它创建了对象的引用，是需要分配内存空间的。打个比方：一个空玻璃杯，你不能说它里面什么都没有，因为里面有空气，当然也可以把它弄成真空，null与” “、new String()的区别就象真空与空气一样。</p><p> 在字符串中存在一个非常特殊的地方，那就是字符串池。每当我们创建一个字符串对象时，首先就会检查字符串池中是否存在面值相等的字符串，如果有，则不再创建，直接放回字符串池中对该对象的引用，若没有则创建然后放入到字符串池中并且返回新建对象的引用。这个机制是非常有用的，因为可以提高效率，减少了内存空间的占用。所以在使用字符串的过程中，推荐使用直接赋值（即String s=”aa”），除非有必要才会新建一个String对象（即String s = new String(”aa”)）。</p><p>String直接赋值和使用new的区别</p><p>String str1 = “ABC”;可能创建一个或者不创建对象，如果”ABC”这个字符串在java String池里不存在，会在java String池里创建一个创建一个String对象(“ABC”)，然后str1指向这个内存地址，无论以后用这种方式创建多少个值为”ABC”的字符串对象，始终只有一个内存地址被分配，之后的都是String的拷贝，Java中称为“字符串驻留”，所有的字符串常量都会在编译之后自动地驻留。</p><p>String str2 = new String(“ABC”);至少创建一个对象，也可能两个。因为用到new关键字，肯定会在heap中创建一个str2的String对象，它的value是“ABC”。同时如果这个字符串再java String池里不存在，会在java池里创建这个String对象“ABC”。</p><p>在JVM里，考虑到垃圾回收（Garbage Collection）的方便，将heap(堆)划分为三部分：young generation(新生代)、tenured generation （old generation）（旧生代）、permanent generation（永生代）。</p><p>字符串为了解决字符串重复问题，生命周期长，存于pergment中。</p><p>JVM中，相应的类被加载运行后，常量池对应的映射到JVM运行时的常量池中</p><p>建议在平时的使用中，尽量使用String = “abcd”;这种方式来创建字符串，而不是String = new String(“abcd”);这种形式，因为使用new构造器创建字符串对象一定会开辟一个新的heap空间，而双引号则是采用了String interning(<strong>字符串驻留</strong>)进行了优化，效率比构造器高</p><ul><li><p>StringBuffer</p><p> StringBuffer和String一样都是用来存储字符串的，只不过由于他们内部的实现方式不同，导致他们所使用的范围不同，对于StringBuffer而言，他在处理字符串时，若是对其进行修改操作，它并不会产生一个新的字符串对象，所以说在内存使用方面它是优于String的。</p><p>   其实在使用方法，StringBuffer的许多方法和String类都差不多，所表示的功能几乎一模一样，只不过在修改时StringBuffer都是修改自身，而String类则是产生一个新的对象，这是他们之间最大的区别。</p><p>   同时StringBuffer是不能使用=进行初始化的，它必须要产生StringBuffer实例，也就是说你必须通过它的构造方法进行初始化。</p><p>   在StringBuffer的使用方面，它更加侧重于对字符串的变化，例如追加、修改、删除，相对应的方法：</p><p>   1、append()：追加指定内容到当前StringBuffer对象的末尾，类似于字符串的连接，这里StringBuffer对象的内容会发生改变。</p><p>   2、insert：该类方法主要是在StringBuffer对象中插入内容。</p><p>   3、delete：该类方法主要用于移除StringBuffer对象中的内容。</p></li><li></li><li><p>StringBuilder</p><p>StringBuilder也是一个可变的字符串对象，他与StringBuffer不同之处就在于它是线程不安全的，基于这点，它的速度一般都比StringBuffer快。与StringBuffer一样，StringBuider的主要操作也是append与insert方法。这两个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符添加或插入到字符串生成器中。</p></li><li><p>如何正确使用</p><p>![20131226204829250](\Java 基础\20131226204829250.png)</p></li></ul><p>  1、String：在字符串不经常变化的场景中可以使用String类，如：常量的声明、少量的变量运算等。</p><p>  ​     2、StringBuffer：在频繁进行字符串的运算（拼接、替换、删除等），并且运行在多线程的环境中，则可以考虑使用StringBuffer，例如XML解析、HTTP参数解析和封装等。</p><p>  ​     3、StringBuilder：在频繁进行字符串的运算（拼接、替换、删除等），并且运行在多线程的环境中，则可以考虑使用StringBuffer，如SQL语句的拼装、JSON封装等（貌似这两个我也是使用|StringBuffer）。</p><h1><span id="异常体系">异常体系</span></h1><p>  <strong><em>不论程序是否发生异常，finally代码块总是会执行。所以finally一般用来关闭资源。</em></strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 自定义异常 继承Exception类 **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">()</span></span>&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">(String message)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> <span class="hljs-keyword">throws</span> MyException</span>&#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException(<span class="hljs-string">&quot;该值不能为0.......&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            System.out.println( i / <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Test test = <span class="hljs-keyword">new</span> Test();<br>        <span class="hljs-keyword">try</span> &#123;<br>            test.display(<span class="hljs-number">0</span>);<br>            System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (MyException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  使用结论：</p><ul><li>尽可能缩小trycatch块</li><li>保证所有的资源都释放 充分使用finally</li><li>catch应分清类型</li></ul><h2><span id="java运算符">java运算符</span></h2><h2><span id="java-循环结构">java 循环结构</span></h2><ul><li>while 循环<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">while</span>（<span class="hljs-literal">true</span>）&#123;&#125;<br></code></pre></td></tr></table></figure></li><li>do…while 循环<br>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</li></ul><p>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</p><ul><li>for循环<br>虽然所有循环结构都可以用 while 或者 do…while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。</li></ul><p>for循环执行的次数是在执行前就确定的。语法格式如下：</p><p>for(初始化; 布尔表达式; 更新) {<br>    //代码语句<br>}</p><ul><li>Java 增强 for 循环<br>Java5 引入了一种主要用于数组的增强型 for 循环。</li></ul><p>Java 增强 for 循环语法格式如下:</p><p>for(声明语句 : 表达式)<br>{<br>   //代码句子<br>}</p><ul><li>break 关键字<br>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</li></ul><p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p><p>语法<br>break 的用法很简单，就是循环结构中的一条语句：</p><p>break;</p><ul><li>continue 关键字<br>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。<br>==在 for 循环中，continue 语句使程序立即跳转到更新语句。==</li></ul><p>==在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句==。</p><h2><span id="判断语句">判断语句</span></h2><p> if …else</p><h2><span id="switch-case">switch case</span></h2><p> switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</p><h2><span id="java-numberampmath">java Number&amp;Math</span></h2><p> ceil 向上取整<br> floor （地板） 向下取整<br> round 算法为Math.floor(x+0.5) 向下取整</p><h2><span id="string-stringbuffer-stringbuilder">String StringBuffer StringBuilder</span></h2><p> String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了<br> 为什么门说String对象是不可变的呢？</p><p>原因在于实例中的 s 只是一个 String 对象的引用，并不是对象本身，当执行 s = “Runoob”; 创建了一个新的对象 “Runoob”，而原来的 “Google” 还存在于内存中</p><h1><span id="集合">集合</span></h1><h2><span id="arraylist">ArrayList</span></h2><p>ArrayList是实现List接口的动态数组，所谓动态就是它的大小是可变的。实现了所有可选列表操作，并允许包括 null 在内的所有元素。除了实现 List 接口外，此类还提供一些方法来操作内部用来存储列表的数组的大小。</p><p>每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。默认初始容量为10。随着ArrayList中元素的增加，它的容量也会不断的自动增长。在每次添加新的元素时，ArrayList都会检查是否需要进行扩容操作，扩容操作带来数据向新数组的重新拷贝，所以如果我们知道具体业务数据量，在构造ArrayList时可以给ArrayList指定一个初始容量，这样就会减少扩容时数据的拷贝问题。当然在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。</p><p><strong>注意，ArrayList实现不是同步的</strong>。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。所以为了保证同步，最好的办法是在创建时完成，以防止意外对列表进行不同步的访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List list = Collections.synchronizedList(<span class="hljs-keyword">new</span> ArrayList(...));<br></code></pre></td></tr></table></figure><h2><span id="二-arraylist源码分析">二、ArrayList源码分析</span></h2><p>ArrayList我们使用的实在是太多了，非常熟悉，所以在这里将不介绍它的使用方法。ArrayList是实现List接口的，底层采用数组实现，所以它的操作基本上都是基于对数组的操作。</p><p><strong>2.1、底层使用数组</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">Object</span>[] elementData;<br></code></pre></td></tr></table></figure><p>transient？？为java关键字，为变量修饰符，如果用transient声明一个实例变量，当对象存储时，它的值不需要维持。Java的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。当一个对象被序列化的时候，transient型变量的值不包括在序列化的表示中，然而非transient型的变量是被包括进去的。</p><p>这里Object[] elementData，就是我们的ArrayList容器，下面介绍的基本操作都是基于该elementData变量来进行操作的。</p><p><strong>2.2、构造函数</strong></p><p>ArrayList提供了三个构造函数：</p><ul><li><code>ArrayList()</code>：默认构造函数，提供初始容量为10的空列表。</li><li><code>ArrayList(int initialCapacity)</code>：构造一个具有指定初始容量的空列表。</li><li><code>ArrayList(Collection&lt;?&gt; extends [E] c)</code>：构造一个包含指定 collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 构造一个初始容量为 10 的空列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(<span class="hljs-number">10</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 构造一个具有指定初始容量的空列表。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>();<br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span><br>                + initialCapacity);<br>    <span class="hljs-keyword">this</span>.elementData = <span class="hljs-keyword">new</span> Object[initialCapacity];<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  构造一个包含指定 collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>    elementData = c.toArray();<br>    size = elementData.length;<br>    <span class="hljs-comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span><br>    <span class="hljs-keyword">if</span> (elementData.getClass() != Object[].class)<br>        elementData = Arrays.copyOf(elementData, size, Object[].class);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.3、新增</strong></p><p>ArrayList提供了<code>add(E e)</code>、<code>add(int index, E element)</code>、<code>addAll(Collection&lt;? extends E&gt; c)</code>、<code>addAll(int index, Collection&lt;? extends E&gt; c)</code>、<code>set(int index, E element)</code> 这个五个方法来实现ArrayList增加。</p><p>add(E e)：将指定的元素添加到此列表的尾部。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>   ensureCapacity(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>   elementData[size++] = e;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>这里ensureCapacity()方法是对ArrayList集合进行扩容操作，elementData(size++) = e，将列表末尾元素指向e。</p><p>add(int index, E element)：将指定的元素插入此列表中的指定位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>&#123;<br>        <span class="hljs-comment">//判断索引位置是否正确</span><br>        <span class="hljs-keyword">if</span> (index &gt; size || index &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(<br>            <span class="hljs-string">&quot;Index: &quot;</span>+index+<span class="hljs-string">&quot;, Size: &quot;</span>+size);<br>        <span class="hljs-comment">//扩容检测</span><br>        ensureCapacity(size+<span class="hljs-number">1</span>);  <br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 对源数组进行复制处理（位移），从index + 1到size-index。</span><br><span class="hljs-comment">         * 主要目的就是空出index位置供数据插入，</span><br><span class="hljs-comment">         * 即向右移动当前位于该位置的元素以及所有后续元素。</span><br><span class="hljs-comment">         */</span><br>        System.arraycopy(elementData, index, elementData, index + <span class="hljs-number">1</span>,<br>                 size - index);<br>        <span class="hljs-comment">//在指定位置赋值</span><br>        elementData[index] = element;<br>        size++;<br>        &#125;<br></code></pre></td></tr></table></figure><p>在这个方法中最根本的方法就是System.arraycopy()方法，该方法的根本目的就是将index位置空出来以供新数据插入，这里需要进行数组数据的右移，这是非常麻烦和耗时的，所以如果指定的数据集合需要进行大量插入（中间插入）操作，推荐使用LinkedList。</p><p><code>addAll(Collection&lt;? extends E&gt; c)</code>：按照指定 collection 的迭代器所返回的元素顺序，将该 collection 中的所有元素添加到此列表的尾部。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addAll</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>        <span class="hljs-comment">// 将集合C转换成数组</span><br>        Object[] a = c.toArray();<br>        <span class="hljs-keyword">int</span> numNew = a.length;<br>        <span class="hljs-comment">// 扩容处理，大小为size + numNew</span><br>        ensureCapacity(size + numNew); <span class="hljs-comment">// Increments modCount</span><br>        System.arraycopy(a, <span class="hljs-number">0</span>, elementData, size, numNew);<br>        size += numNew;<br>        <span class="hljs-keyword">return</span> numNew != <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这个方法无非就是使用System.arraycopy()方法将C集合(先准换为数组)里面的数据复制到elementData数组中。这里就稍微介绍下System.arraycopy()，因为下面还将大量用到该方法。该方法的原型为：public static void<strong>arraycopy</strong>(Object src, int srcPos, Object dest, int destPos, int length)。它的根本目的就是进行数组元素的复制。即从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。将源数组src从srcPos位置开始复制到dest数组中，复制长度为length，数据从dest的destPos位置开始粘贴。</p><p><code>addAll(int index, Collection&lt;?&gt; extends E&gt; c)</code>：从指定的位置开始，将指定 collection 中的所有元素插入到此列表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addAll</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>        <span class="hljs-comment">//判断位置是否正确</span><br>        <span class="hljs-keyword">if</span> (index &gt; size || index &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(<span class="hljs-string">&quot;Index: &quot;</span> + index + <span class="hljs-string">&quot;, Size: &quot;</span><br>                    + size);<br>        <span class="hljs-comment">//转换成数组</span><br>        Object[] a = c.toArray();<br>        <span class="hljs-keyword">int</span> numNew = a.length;<br>        <span class="hljs-comment">//ArrayList容器扩容处理</span><br>        ensureCapacity(size + numNew); <span class="hljs-comment">// Increments modCount</span><br>        <span class="hljs-comment">//ArrayList容器数组向右移动的位置</span><br>        <span class="hljs-keyword">int</span> numMoved = size - index;<br>        <span class="hljs-comment">//如果移动位置大于0，则将ArrayList容器的数据向右移动numMoved个位置，确保增加的数据能够增加</span><br>        <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>            System.arraycopy(elementData, index, elementData, index + numNew,<br>                    numMoved);<br>        <span class="hljs-comment">//添加数组</span><br>        System.arraycopy(a, <span class="hljs-number">0</span>, elementData, index, numNew);<br>        <span class="hljs-comment">//容器容量变大</span><br>        size += numNew;   <br>        <span class="hljs-keyword">return</span> numNew != <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>set(int index, E element)：用指定的元素替代此列表中指定位置上的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>&#123;<br>        <span class="hljs-comment">//检测插入的位置是否越界</span><br>        RangeCheck(index);<br><br>        E oldValue = (E) elementData[index];<br>        <span class="hljs-comment">//替代</span><br>        elementData[index] = element;<br>        <span class="hljs-keyword">return</span> oldValue;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>2.4、删除</strong></p><p>ArrayList提供了remove(int index)、remove(Object o)、removeRange(int fromIndex, int toIndex)、removeAll()四个方法进行元素的删除。</p><p>remove(int index)：移除此列表中指定位置上的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-comment">//位置验证</span><br>        RangeCheck(index);<br><br>        modCount++;<br>        <span class="hljs-comment">//需要删除的元素</span><br>        E oldValue = (E) elementData[index];   <br>        <span class="hljs-comment">//向左移的位数</span><br>        <span class="hljs-keyword">int</span> numMoved = size - index - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//若需要移动，则想左移动numMoved位</span><br>        <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>            System.arraycopy(elementData, index + <span class="hljs-number">1</span>, elementData, index,<br>                    numMoved);<br>        <span class="hljs-comment">//置空最后一个元素</span><br>        elementData[--size] = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// Let gc do its work</span><br><br>        <span class="hljs-keyword">return</span> oldValue;<br>    &#125;<br></code></pre></td></tr></table></figure><p>remove(Object o)：移除此列表中首次出现的指定元素（如果存在）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-comment">//因为ArrayList中允许存在null，所以需要进行null判断</span><br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; size; index++)<br>                <span class="hljs-keyword">if</span> (elementData[index] == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-comment">//移除这个位置的元素</span><br>                    fastRemove(index);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; size; index++)<br>                <span class="hljs-keyword">if</span> (o.equals(elementData[index])) &#123;<br>                    fastRemove(index);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>其中fastRemove()方法用于移除指定位置的元素。如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fastRemove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        modCount++;<br>        <span class="hljs-keyword">int</span> numMoved = size - index - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>            System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index,<br>                             numMoved);<br>        elementData[--size] = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// Let gc do its work</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>removeRange(int fromIndex, int toIndex)：移除列表中索引在 <code>fromIndex</code>（包括）和 <code>toIndex</code>（不包括）之间的所有元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeRange</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fromIndex, <span class="hljs-keyword">int</span> toIndex)</span> </span>&#123;<br>        modCount++;<br>        <span class="hljs-keyword">int</span> numMoved = size - toIndex;<br>        System<br>                .arraycopy(elementData, toIndex, elementData, fromIndex,<br>                        numMoved);<br><br>        <span class="hljs-comment">// Let gc do its work</span><br>        <span class="hljs-keyword">int</span> newSize = size - (toIndex - fromIndex);<br>        <span class="hljs-keyword">while</span> (size != newSize)<br>            elementData[--size] = <span class="hljs-keyword">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>removeAll()：是继承自AbstractCollection的方法，ArrayList本身并没有提供实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">removeAll</span><span class="hljs-params">(Collection&lt;?&gt; c)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> modified = <span class="hljs-keyword">false</span>;<br>        Iterator&lt;?&gt; e = iterator();<br>        <span class="hljs-keyword">while</span> (e.hasNext()) &#123;<br>            <span class="hljs-keyword">if</span> (c.contains(e.next())) &#123;<br>                e.remove();<br>                modified = <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> modified;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>2.5、查找</strong></p><p>ArrayList提供了get(int index)用读取ArrayList中的元素。由于ArrayList是动态数组，所以我们完全可以根据下标来获取ArrayList中的元素，而且速度还比较快，故ArrayList长于随机访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>       RangeCheck(index);<br><br>       <span class="hljs-keyword">return</span> (E) elementData[index];<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>2.6、扩容</strong></p><p>在上面的新增方法的源码中我们发现每个方法中都存在这个方法：ensureCapacity()，该方法就是ArrayList的扩容方法。在前面就提过ArrayList每次新增元素时都会需要进行容量检测判断，若新增元素后元素的个数会超过ArrayList的容量，就会进行扩容操作来满足新增元素的需求。所以当我们清楚知道业务数据量或者需要插入大量元素前，我可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>        <span class="hljs-comment">//修改计时器</span><br>        modCount++;<br>        <span class="hljs-comment">//ArrayList容量大小</span><br>        <span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 若当前需要的长度大于当前数组的长度时，进行扩容操作</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (minCapacity &gt; oldCapacity) &#123;<br>            Object oldData[] = elementData;<br>            <span class="hljs-comment">//计算新的容量大小，为当前容量的1.5倍</span><br>            <span class="hljs-keyword">int</span> newCapacity = (oldCapacity * <span class="hljs-number">3</span>) / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (newCapacity &lt; minCapacity)<br>                newCapacity = minCapacity;<br>            <span class="hljs-comment">//数组拷贝，生成新的数组</span><br>            elementData = Arrays.copyOf(elementData, newCapacity);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在这里有一个疑问，为什么每次扩容处理会是1.5倍，而不是2.5、3、4倍呢？通过google查找，发现1.5倍的扩容是最好的倍数。因为一次性扩容太大(例如2.5倍)可能会浪费更多的内存(1.5倍最多浪费33%，而2.5被最多会浪费60%，3.5倍则会浪费71%……)。但是一次性扩容太小，需要多次对数组重新分配内存，对性能消耗比较严重。所以1.5倍刚刚好，既能满足性能需求，也不会造成很大的内存消耗。</p><p>处理这个ensureCapacity()这个扩容数组外，ArrayList还给我们提供了将底层数组的容量调整为当前列表保存的实际元素的大小的功能。它可以通过trimToSize()方法来实现。该方法可以最小化ArrayList实例的存储量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">trimToSize</span><span class="hljs-params">()</span> </span>&#123;<br>        modCount++;<br>        <span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br>        <span class="hljs-keyword">if</span> (size &lt; oldCapacity) &#123;<br>            elementData = Arrays.copyOf(elementData, size);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2><span id="string的hashcode重复问题">String的hashcode重复问题</span></h2><p>在A-z范围内有特殊字符，从结果看，仅仅3位长度的字符串：<br>不处理：　138510次重复<br>去掉字母意外字符：　122500次重复<br>所有字符转小写：6612次重复(少了很多）<br>去掉字母意外字符，并且转小写：没有重复！4位字符串也没见重复</p><p>不难看出：</p><ol><li>缺省实现为英文字母优化</li><li>字母大小写可能导致重复</li></ol><p>可能：<br>长字符串可能hashcode重复<br>中文字符串和特殊字符可能hashcode重复 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;重地&quot;</span>.hashCode());<br>System.out.println(<span class="hljs-string">&quot;通话&quot;</span>.hashCode());<br></code></pre></td></tr></table></figure><h2><span id="java-正则表达式">Java 正则表达式</span></h2><h2><span id="java-streamfileio">Java Stream，File，Io</span></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Android 入门</title>
    <link href="/2021/01/02/android%E5%85%A5%E9%97%A8/"/>
    <url>/2021/01/02/android%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>我没有列进去，是因为这部分内容太细节，而且属于死记硬背型知识点，学了也容易忘，那就干脆别学了，遇到问题时百度一下，就几行代码的事。</p><p>本学习路线共有 17 关，如下。</p><h2><span id="第一关四大组件建议学习时间一周">第一关：四大组件（建议学习时间：一周）</span></h2><p>知识点：四大组件的使用、Activity启动模式、Service的start和bind</p><p>学习资料：<br>① Android 四大组件 - 简书 【推荐理由】全面，内容参考了艺术探索。<br>② 彻底弄懂Activity四大启动模式 - Android研发专栏 - CSDN博客 【推荐理由】理论配合例子，好理解。</p><h2><span id="第二关布局和控件建议学习时间3天">第二关：布局和控件（建议学习时间：3天）</span></h2><p>知识点：常见的布局和布局参数</p><p>学习资料：<br>① Android系统五大布局详解Layout - 漫步云端 - CSDN博客 【推荐理由】比较全面，理论结合例子。<br>② Android 基础：常用布局 介绍 &amp; 使用（附 属性查询） - 简书 【推荐理由】对布局参数进行了详细地介绍。</p><h2><span id="第三关简单自定义view建议学习时间一周">第三关：简单自定义View（建议学习时间：一周）</span></h2><p>知识点：会简单的自定义View即可。在入门阶段，不适合了解measure、layout和draw过程，不建议去学习复杂的自定义View。</p><p>学习资料：<br>① 自定义View，有这一篇就够了 - 简书 【推荐理由】比较全面，内容参考了艺术探索，靠谱。<br>② GitHub - chenzongwen/MiClockView 【推荐理由】一个闹钟的实际例子。<br>③ Android 自定义 View 合集 - Android - 掘金 【推荐理由】自定义View合集，可以当做字典用。</p><h2><span id="第四关动画和手势建议学习时间2周">第四关：动画和手势（建议学习时间：2周）</span></h2><p>要求：掌握View动画、属性动画、布局动画、手势<br>学习资料：<br>① Android中的View动画和属性动画 - 简书【推荐理由】View动画+属性动画，有讲解，有例子，还有美女图片看。<br>② HenCoder Android 自定义 View 1-6：属性动画 Property Animat…【推荐理由】hencoder出品，非常非常详细，推荐当做文档来查看<br>③ Android属性动画深入分析：让你成为动画牛人 - 任玉刚 - CSDN博客 【推荐理由】深度分析属性动画，任玉刚写的<br>④ android 动画系列 (3) - layoutAnimation 视图动画 - 简书【推荐理由】LayoutAnimation，可以帮助大家实现一些特殊的效果，必备<br>⑤ RecyclerView 与 LayoutAnimation 实现的进入动画（一 ）: List -… 【推荐理由】LayoutAnimation结合RecyclerView的例子，进一步理解<br>⑥ 安卓自定义View进阶-手势检测(GestureDetector) 【推荐理由】普通手势检测，有说明有例子有效果图，好理解<br>⑦ 安卓自定义View进阶-缩放手势检测(ScaleGestureDecetor) 【推荐理由】缩放手势检测，有说明有例子有效果图，好理解</p><h2><span id="第五关网络建议学习时间1周">第五关：网络（建议学习时间：1周）</span></h2><p>要求：了解HTTP/HTTPS、状态码、header，get和post等；掌握网络请求API和相关网络库；熟悉长连接。<br>备注：网络库和文件上传将在开源库部分讲解<br>学习资料：<br>① HTTP 必知必会的那些 【推荐理由】HTTP/HTTPS基础知识，简单易懂<br>② Android HttpURLConnection详解 - 简书 【推荐理由】一个HttpURLConnection的小例子，清晰易懂<br>③ 手把手教你写 Socket 长连接 【推荐理由】手把手写socket长连接，长连接不再神秘</p><h2><span id="第六关图片加载建议学习时间2周">第六关：图片加载（建议学习时间：2周）</span></h2><p>要求：了解drawable加载规则以及图片缓存<br>备注：图片加载框架将在开源库部分讲解<br>学习资料：<br>① Android中Bitmap内存优化 - 简书 【推荐理由】深入浅出，告诉你一张图片到底占用多大内存<br>② Android drawable微技巧，你所不知道的drawable的那些细节 - 郭霖的专栏 - …【推荐理由】告诉你图片放在不同drawable目录下的差别，郭霖出品，这理由够充分吧<br>③ Android照片墙完整版，完美结合LruCache和DiskLruCache - 郭霖的专栏 - … 【推荐理由】LruCache和DiskLruCache，图片的缓存策略，郭霖出品<br>④ Android DiskLruCache完全解析，硬盘缓存的最佳方案 - 郭霖的专栏 - CSDN博… 【推荐理由】DiskLruCache的原理，郭霖出品</p><h2><span id="第七关文件和数据库-建议学习时间1周">第七关：文件和数据库 (建议学习时间：1周)</span></h2><p>要求：了解文件流、sqlite<br>学习资料：<br>① Java 文件流总结 - 简书 【推荐理由】详细介绍了文件输入输出流<br>② Java 随机访问文件_w3cschool【推荐理由】Java随机访问文件<br>③ Java 序列化的高级认识 【推荐理由】Java的序列化原理以及对象输入输出流，来自IBM社区的经典文章<br>④ Android SQLite详解 - 简书【推荐理由】sqlite数据库如何使用<br>⑤ Concurrent database access - Dmytro Danylyk 【推荐理由】sqlite到底是线程安全的吗？</p><h2><span id="第八关handler-建议学习时间3天">第八关：Handler (建议学习时间：3天)</span></h2><p>要求：会使用Handler，知道looper的概念<br>学习资料：<br>① Android Handler的基本使用 - 简书 【推荐理由】了解Handler最基本的使用方式，文章清晰易懂<br>② Android Handler详解 - 简书【推荐理由】简单理解Handler的内部原理</p><h2><span id="第九关异步线程池-建议学习时间7天">第九关：异步线程池 (建议学习时间：7天)</span></h2><p>要求：熟练使用线程、线程池、线程同步<br>学习资料：<br>① Android 线程和线程池一篇就够了 - Android - 掘金【推荐理由】一篇文章掌握Android中的线程和线程池，全面易懂<br>② Java线程同步：synchronized锁住的是代码还是对象 - 叉叉哥的BLOG - CSDN博…【推荐理由】彻底了解锁到底是哪个对象<br>③ java中的wait、notify、notifyAll - 简书 【推荐理由】了解wait、notify、notifyAll<br>④ Java并发编程中级篇(三)：使用CountDownLatch控制多线程并发等待 - 阿拉德大陆的魔… 【推荐理由】CountDownLatch，更优雅的线程同步方式</p><h2><span id="第十关resources-建议学习时间1天">第十关：Resources (建议学习时间：1天)</span></h2><p>要求：掌握Android中访问资源的方式，好吧，这一关有点简单<br>学习资料：<br>① Android  xml资源文件中@、@android:type、@*、？、@ 含义和区别 - 小M… 【推荐理由】R的使用技巧<br>② Android根据资源名获取资源ID - 技术小黑屋【推荐理由】如何通过资源名字找到资源id</p><h2><span id="第十一关retrofit-okhttp-建议学习时间3天">第十一关：Retrofit / Okhttp (建议学习时间：3天)</span></h2><p>要求：会使用Retrofit / Okhttp进行日常开发，复杂功能可以通过搜索和查阅官方文档解决即可<br>学习资料：<br>① Retrofit   RxJava ＋ OkHttp 让网络请求变的简单-基础篇 - 简书 【推荐理由】retrofit基础篇，作者是简书优秀作者<br>② Retrofit   RxJava ＋ OkHttp 让网络请求变的简单-封装篇 - 简书【推荐理由】retrofit封装篇，作者是简书优秀作者<br>③ Retrofit 【推荐理由】retrofit官方API介绍</p><h2><span id="第十二关rxjava-建议学习时间3天">第十二关：RxJava (建议学习时间：3天)</span></h2><p>要求：会使用rxjava进行日常开发，复杂功能可以通过搜索和查阅官方文档解决即可<br>学习资料：<br>① 给 Android 开发者的 RxJava 详解 【推荐理由】rxjava入门一篇文章搞定，作者是扔物线，所用版本较低，但所幸变化不大<br>② RxJava2 只看这一篇文章就够了 - 掘金【推荐理由】rxjava2的API大全，这篇文章非常长，建议浏览常用的API，其他API需要时再查</p><h2><span id="第十三关glide-建议学习时间1天">第十三关：Glide (建议学习时间：1天)</span></h2><p>要求：会使用glide进行图片加载<br>学习资料：<br>① Android图片加载框架最全解析（八），带你全面了解Glide 4的用法 - 郭霖的专栏 - CS… 【推荐理由】一篇文章掌握glide，郭霖出品，这一篇真的够了，就加载个图片而已，没那么复杂</p><h2><span id="第十四关注解框架-建议学习时间3天">第十四关：注解框架 (建议学习时间：3天)</span></h2><p>要求：熟练使用注解框架<br>学习资料：<br>① 在 Android Studio 中使用 Annotation Processor - 云在千峰 【推荐理由】Annotation Processor介绍<br>② Android注解快速入门和实用解析 - 简书【推荐理由】注解快速入门，作者为简书优秀作者<br>③ Android Butter Knife 框架——最好用的View注入 - 简书 【推荐理由】butter knife 使用指南，简单直接</p><h2><span id="第十五关architecture-components-建议学习时间14天">第十五关：Architecture components (建议学习时间：14天)</span></h2><p>要求：熟练使用Architecture components，比如 lifecycle、room等<br>学习资料：<br>① Android Architecture Components 只看这一篇就够了 - 掘金 【推荐理由】一篇文章搞定它们，玉刚说写作平台赞助<br>② GitHub - googlesamples/android-architecture-compon…【推荐理由】官方例子，下载下来看看</p><p> 第 16-17 关，请点击 <a href="https://t.zsxq.com/uFQr3Nr">https://t.zsxq.com/uFQr3Nr</a> 继续。</p><h2><span id="第十六关代码管理-建议学习时间14天">第十六关：代码管理 (建议学习时间：14天)</span></h2><p>学习资料：<br>Git：<a href="https://www.liaoxuefeng.com/wiki/00137395163059296">https://www.liaoxuefeng.com/wiki/00137395163059296</a>… 【推荐理由】跟廖雪峰学git</p><p>Code review：选修，入职后，你的团队会教你的</p><p>代码风格：不同人不一样，这是我的代码风格，和Android源码的代码风格保持一致，供你们参考：<a href="https://pan.baidu.com/s/1PPONFjVfNP1PYt6mtQ4ZtQ">https://pan.baidu.com/s/1PPONFjVfNP1PYt6mtQ4ZtQ</a></p><p>单元测试：<br>① <a href="https://mp.weixin.qq.com/s/smSrrUWR9DBYXsusS6y_ig">https://mp.weixin.qq.com/s/smSrrUWR9DBYXsusS6y_ig</a> 【推荐理由】一篇文章搞定，玉刚说写作平台赞助<br>② <a href="https://juejin.im/post/5b66de2c6fb9a04fbd1b4725%E3%80%90%E6%8E%A8%E8%8D%90%E7%90%86%E7%94%B1%E3%80%91UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%AF%A6%E8%A7%A3%EF%BC%8C%E7%8E%89%E5%88%9A%E8%AF%B4%E5%86%99%E4%BD%9C%E5%B9%B3%E5%8F%B0%E8%B5%9E%E5%8A%A9">https://juejin.im/post/5b66de2c6fb9a04fbd1b4725【推荐理由】UI自动化测试详解，玉刚说写作平台赞助</a><br>③ <a href="https://juejin.im/post/5b6851f65188251ac5551c63">https://juejin.im/post/5b6851f65188251ac5551c63</a> 【推荐理由】UI自动化测试例子，却把青梅嗅出品</p><h2><span id="第十七关性能优化-建议学习时间7天">第十七关：性能优化 (建议学习时间：7天)</span></h2><p>要求：熟悉性能优化的常见套路并能进行相应优化<br>学习资料：<br>① <a href="https://juejin.im/post/5b50b017f265da0f7b2f649c%E3%80%90%E6%8E%A8%E8%8D%90%E7%90%86%E7%94%B1%E3%80%91%E8%80%81%E8%A7%84%E7%9F%A9%EF%BC%8C%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%90%9E%E5%AE%9A%EF%BC%8C%E7%8E%89%E5%88%9A%E8%AF%B4%E5%86%99%E4%BD%9C%E5%B9%B3%E5%8F%B0%E8%B5%9E%E5%8A%A9">https://juejin.im/post/5b50b017f265da0f7b2f649c【推荐理由】老规矩，一篇文章搞定，玉刚说写作平台赞助</a><br>② <a href="https://juejin.im/post/5baa3eb76fb9a05cdb103c74%E3%80%90%E6%8E%A8%E8%8D%90%E7%90%86%E7%94%B1%E3%80%91%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96%EF%BC%8C%E7%8E%89%E5%88%9A%E8%AF%B4%E5%86%99%E4%BD%9C%E5%B9%B3%E5%8F%B0%E8%B5%9E%E5%8A%A9">https://juejin.im/post/5baa3eb76fb9a05cdb103c74【推荐理由】启动速度优化，玉刚说写作平台赞助</a><br>③ <a href="https://mp.weixin.qq.com/s/_s88Xjti0YwO4rayKvF5Dg">https://mp.weixin.qq.com/s/_s88Xjti0YwO4rayKvF5Dg</a> 【推荐理由】内存优化，玉刚说写作平台赞助<br>④ <a href="https://juejin.im/post/5b9e61c7e51d450e41153cdd">https://juejin.im/post/5b9e61c7e51d450e41153cdd</a> 【推荐理由】布局优化，玉刚说写作平台赞助<br>收起</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
